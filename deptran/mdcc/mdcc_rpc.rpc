namespace mdcc;

service MdccLearner {
    Learn(Result r);
};

abstract service MdccClient {
    defer Start(StartRequest req | StartResponse res);
    defer StartPiece(rococo::SimpleCommand cmd | StartPieceResponse res);
};

abstract service MdccLeader {
    defer Propose(ProposeRequest req | ProposeResponse res);
};

service MdccAcceptor {
    defer Propose(ProposeRequest req | ProposeResponse res);
    defer ProposeFast(ProposeRequest req | ProposeResponse res);
    defer Accept(AcceptRequest req | AcceptResponse res);
    defer Decide(Result result);
};

struct ConsensusValue {
    // TODO define; need list of options as defined in the paper
};

struct ProposalNum {
    i64 num;
    i64 server;
};

struct StartRequest {
    i64 txn_id;
    i32 txn_type;
    map<i32, Value> inputs;
};

struct StartPieceRequest {
    i64 txn_id;
    i32 txn_type;
    i32 piece_id;
    rococo::SimpleCommand command;
    map<i32, Value> inputs;
};

struct StartResponse {
    i8 result; // 1 = accept; 0 = reject
};

struct StartPieceResponse {
    i32 result; // 1 = accept; 0 = reject
};

// Phase1a
struct ProposeRequest {
    OptionSet updates
};

// Phase1b
struct ProposeResponse {
    string table;
    i64 key;
    i8 accepted;
};

// Phase2a
struct AcceptRequest {
    ProposalNum m;
    ConsensusValue v;
};

// Phase2b
struct AcceptResponse {
    ProposalNum m;
    ConsensusValue v;
};

// called 'Visibility' in the paper
struct Result {
    i8 result; // 1 = accept; 0 = reject
    ConsensusValue v;
};
